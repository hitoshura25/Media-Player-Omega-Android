# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
default_platform(:android)

platform :android do
  before_all do
    setup_circle_ci
  end

  desc "Feature build"
  lane :build_feature do
    gradle(tasks: ["app:bundleRelease"])
    deploy_internal_share
  end

  desc "Release"
  lane :release do
    gradle(tasks: ["clean", "app:bundleRelease"])
    deploy_play_store(track:"internal")
  end

  desc "Test"
  lane :test do
    gradle(tasks: ["test", "lint", "assembleAndroidTest"])
  end

  desc "Increment release version"
  lane :increment_version do |options|
    if (options[:version] == 'major')
      gradle(task: "incrementMajorVersion")
    elsif (options[:version] == 'minor')
      gradle(task: "incrementMinorVersion")
    elsif (options[:version] == 'patch')
      gradle(task: "incrementPatchVersion")
    elsif (options[:version] == 'rc')
      gradle(task: "incrementReleaseCandidate")
    elsif (options[:version] == 'ci')
      gradle(task: "ciIncrementVersion")
    end
    version_props = get_versions
    tag_name = "#{version_props['major']}.#{version_props['minor']}.#{version_props['patch']}-rc#{version_props['rc']}"
    git_commit(path: 'appVersion.properties', message: "[skip ci] Incrementing Version For Release")
    push_to_git_remote
    add_git_tag(tag: tag_name)
    push_to_git_remote
  end

  desc "Deploy a new version to the alpha track on Google Play"
  lane :deploy_play_store do |options|
    version_props = get_versions
    upload_to_play_store(
      aab: "#{Dir.pwd}/../app/build/outputs/bundle/release/app-release.aab",
      release_status: "draft",
      version_name: version_props['versionName'],
      track: options[:track]
    )
    email_play_store_internal_testing_release(version_name: version_props['versionName'])
  end

  desc "Deploy a new internal sharing build on Google Play"
  lane :deploy_internal_share do
    lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] = nil
    lane_context[SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS] = nil
    lane_context[SharedValues::GRADLE_ALL_OUTPUT_JSON_OUTPUT_PATHS] = nil
    lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] = nil
    lane_context[SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH] = nil

    url = upload_to_play_store_internal_app_sharing(
      aab: "#{Dir.pwd}/../app/build/outputs/bundle/release/app-release.aab",
    )
    email_internal_share_build(url: url)
  end

  desc "Email new internal share build"
  lane :email_internal_share_build do |options|
    mailgun(
      postmaster: ENV['MAILGUN_POSTMASTER'],
      apikey: ENV['MAILGUN_API_KEY'],
      to: ENV['NOTIFICATION_RECIPIENT'],
      from: "#{ENV['NOTIFICATION_SENDER']} <#{ENV['MAILGUN_POSTMASTER']}>",
      subject: "New Build Available: #{ENV['BUILD_NUMBER']}",
      message: "New build Available (#{Time.now})",
      app_link: "#{options[:url]}",
      template_path: "new_build_template.erb"
    )
  end

    desc "Email Play Store Internal Testing Release Ready"
    lane :email_play_store_internal_testing_release do |options|
      mailgun(
        postmaster: ENV['MAILGUN_POSTMASTER'],
        apikey: ENV['MAILGUN_API_KEY'],
        to: ENV['NOTIFICATION_RECIPIENT'],
        from: "#{ENV['NOTIFICATION_SENDER']} <#{ENV['MAILGUN_POSTMASTER']}>",
        subject: "#{options[:version_name]} Release Draft Available",
        message: "#{options[:version_name]} Release Draft Is Now Available On The Internal Testing Track In The Play Console (#{Time.now})",
        app_link: "",
        template_path: "new_release_draft_template.erb",
        custom_placeholders: {
          :version_name => options[:version_name]
        }
      )
    end

  desc "Get app version information from the build"
  lane :get_versions do
    version_output = gradle(task: '-q getVersions')
    version_props = {}
    version_output.each_line do |line|
      line.strip!
      version_prop = line.split("=")
      version_props[version_prop[0]] = version_prop[1]
    end
    version_props
  end
end
