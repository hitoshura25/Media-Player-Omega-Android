apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    signingConfigs {
        release {
            storeFile file(keystore_file)
            storePassword keystore_password
            keyAlias keystore_key_alias
            keyPassword keystore_key_password
        }
    }
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.vmenon.mpo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 7
        versionName "1.7"
        multiDexEnabled true
        testInstrumentationRunner "com.vmenon.mpo.test.CucumberTestRunner"
    }
    dynamicFeatures = [
            ':downloads_feature',
            ':login_feature',
            ':my_library_feature',
            ':player_feature',
            ':search_feature'
    ]

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':common_framework')
    implementation project(':system_framework')
    implementation project(':downloads_framework')
    implementation project(':my_library_framework')
    implementation project(':player_framework')
    implementation project(':search_framework')

    implementation project(':api_mpo')
    implementation project(':extensions')
    implementation project(':common_converters')
    api project(':common_domain')
    implementation project(':search_domain')
    implementation project(':login_domain')

    api project(':navigation_domain')
    api project(':navigation_framework')

    implementation project(':common_view')
    implementation project(':persistence_room')

    implementation 'com.google.android.play:core:1.10.0'

    implementation Libs.material
    implementation Libs.cardview
    implementation Libs.recyclerview
    implementation Libs.androidx_media_media
    implementation Libs.constraintlayout

    // ViewModel
    implementation Libs.lifecycle_viewmodel_ktx
    // LiveData
    implementation Libs.lifecycle_livedata_ktx

    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation Libs.lifecycle_common_java8

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation Libs.lifecycle_service

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation Libs.lifecycle_process

    // optional - ReactiveStreams support for LiveData
    implementation Libs.lifecycle_reactivestreams_ktx

    implementation Libs.dagger
    implementation Libs.legacy_support_v4
    kapt Libs.dagger_compiler

    implementation Libs.dagger
    kapt Libs.dagger_android_processor

    implementation Libs.glide

    implementation Libs.jsr250_api

    testImplementation Libs.junit_junit
    implementation Libs.kotlin_stdlib_jdk8
    implementation Libs.kotlinx_coroutines_core

    implementation Libs.com_android_support_multidex
    implementation Libs.work_runtime_ktx

    implementation Libs.navigation_fragment_ktx
    implementation Libs.navigation_ui_ktx

    debugImplementation Libs.stetho

    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.guava:guava:27.1-android'

    androidTestImplementation Libs.androidx_test_ext_junit
    androidTestImplementation Libs.espresso_core
    androidTestImplementation Libs.uiautomator
    androidTestImplementation Libs.annotation
    androidTestImplementation Libs.cucumber_android
    androidTestImplementation Libs.junit_ktx
}
ext {
    BUNDLE_TOOL = "${rootProject.projectDir}/tools/bundletool-all-1.6.1.jar"
}

def buildBundleApks(buildType) {
    def command = [
            "java",
            "-jar",
            BUNDLE_TOOL,
            "build-apks",
            "--bundle=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.aab",
            "--output=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.apks",
            "--local-testing",
            "--overwrite"
    ]

    if (buildType == 'release') {
        command.add("--ks=$keystore_file")
        command.add("--ks-pass=pass:$keystore_password")
        command.add("--ks-key-alias=$keystore_key_alias")
    }

    exec {
        commandLine command.toArray()
    }
}

def deployBundleApks(buildType) {
    exec {
        environment "ANDROID_HOME", ANDROID_HOME
        commandLine "java", "-jar",
                BUNDLE_TOOL,
                "install-apks",
                "--apks=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.apks"
    }
}

task buildBundleApksDebug(dependsOn: 'bundleDebug') {
    doLast {
        buildBundleApks('debug')
    }
}

task deployBundleApksDebug(dependsOn: 'buildBundleApksDebug') {
    doLast {
        deployBundleApks('debug')
    }
}

task buildBundleApksRelease(dependsOn: 'bundleRelease') {
    doLast {
        buildBundleApks('release')
    }
}

task deployBundleApksRelease(dependsOn: 'buildBundleApksRelease') {
    doLast {
        deployBundleApks('release')
    }
}

