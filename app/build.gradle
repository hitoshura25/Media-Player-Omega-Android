import okhttp3.tls.HeldCertificate

import java.security.cert.CertificateExpiredException
import java.util.concurrent.TimeUnit

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def buildNumber = System.getenv('BUILD_NUMBER')

android {
    signingConfigs {
        release {
            storeFile file(System.getenv('android_keystore_file'))
            storePassword System.getenv('android_keystore_password')
            keyAlias System.getenv('android_keystore_key_alias')
            keyPassword System.getenv('android_keystore_key_password')
        }
    }
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.vmenon.mpo"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        multiDexEnabled true
        testInstrumentationRunner "com.vmenon.mpo.test.CucumberTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        buildConfigField("String", "buildNumber", "\"${buildNumber != null ? buildNumber : 0}\"")
    }
    dynamicFeatures = [
            ':downloads_feature',
            ':login_feature',
            ':my_library_feature',
            ':player_feature',
            ':search_feature'
    ]

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }
    lintOptions {
        abortOnError false
    }
}

androidComponents.onVariants(androidComponents.selector().all()) { variant ->
    variant.outputs.forEach { output ->
        output.versionName.set(readVersionName())
        output.versionCode.set(generateVersionCode())
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':auth_framework')
    implementation project(':common_framework')
    implementation project(':system_framework')
    implementation project(':downloads_framework')
    implementation project(':my_library_framework')
    implementation project(':player_framework')
    implementation project(':search_framework')
    implementation project(':navigation_framework')
    implementation project(':common_converters')
    implementation project(':common_view')
    implementation project(':persistence_room')

    implementation Libs.com_google_android_play_core

    implementation Libs.constraintlayout

    implementation Libs.lifecycle_viewmodel_ktx
    implementation Libs.lifecycle_livedata_ktx

    implementation Libs.dagger
    implementation Libs.legacy_support_v4
    kapt Libs.dagger_compiler

    implementation Libs.dagger
    kapt Libs.dagger_android_processor

    testImplementation Libs.junit_junit
    implementation Libs.kotlin_stdlib
    implementation Libs.kotlinx_coroutines_core

    implementation Libs.multidex
    implementation Libs.work_runtime_ktx

    implementation Libs.navigation_fragment_ktx
    implementation Libs.navigation_ui_ktx

    implementation platform(Libs.firebase_bom)
    implementation Libs.firebase_analytics_ktx
    implementation Libs.firebase_crashlytics_ktx
    implementation Libs.guava

    debugImplementation Libs.stetho
    debugImplementation Libs.leakcanary_android
    debugImplementation Libs.okhttp

    androidTestImplementation project(':persistence_room_test')
    androidTestImplementation Libs.androidx_test_ext_junit
    androidTestImplementation Libs.androidx_test_rules
    androidTestImplementation Libs.espresso_core
    androidTestImplementation Libs.uiautomator
    androidTestImplementation Libs.annotation
    androidTestImplementation Libs.cucumber_android
    androidTestImplementation Libs.junit_ktx
    androidTestImplementation Libs.espresso_intents
    androidTestImplementation Libs.mockwebserver
    androidTestImplementation Libs.okhttp
    androidTestImplementation Libs.okhttp_tls
}
ext {
    BUNDLE_TOOL = "${rootProject.projectDir}/tools/bundletool-all-1.6.1.jar"
}

def buildBundleApks(buildType) {
    def command = [
            "java",
            "-jar",
            BUNDLE_TOOL,
            "build-apks",
            "--bundle=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.aab",
            "--output=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.apks",
            "--local-testing",
            "--overwrite"
    ]

    if (buildType == 'release') {
        command.add("--ks=${System.getenv('android_keystore_file')}")
        command.add("--ks-pass=pass:${System.getenv('android_keystore_password')}")
        command.add("--ks-key-alias=${System.getenv('android_keystore_key_alias')}")
    }

    exec {
        commandLine command.toArray()
    }
}

def deployBundleApks(buildType) {
    exec {
        environment "ANDROID_HOME", ANDROID_HOME
        commandLine "java", "-jar",
                BUNDLE_TOOL,
                "install-apks",
                "--apks=${project.buildDir}/outputs/bundle/$buildType/app-${buildType}.apks"
    }
}

def isMockWebServerCertValid(mockWebServerPemFile, mockWebServerCertFile) {
    if (mockWebServerPemFile.exists() && mockWebServerCertFile.exists()) {
        def currentCert = HeldCertificate.decode(mockWebServerPemFile.text)
        try {
            currentCert.certificate().checkValidity()
            println("MockWebServer certificate is still valid")
            return true
        } catch (CertificateExpiredException e) {
            println("Need to regenerate MockWebServer certificate")
        }
    }
    return false
}

task buildBundleApksDebug(dependsOn: 'bundleDebug') {
    outputs.files("${project.buildDir}/outputs/bundle/debug/app-debug.apks")
    doLast {
        buildBundleApks('debug')
    }
}

task deployBundleApksDebug(dependsOn: 'buildBundleApksDebug') {
    doLast {
        deployBundleApks('debug')
    }
}

task buildBundleApksRelease(dependsOn: 'bundleRelease') {
    outputs.files("${project.buildDir}/outputs/bundle/release/app-release.apks")
    doLast {
        buildBundleApks('release')
    }
}

task deployBundleApksRelease(dependsOn: 'buildBundleApksRelease') {
    doLast {
        deployBundleApks('release')
    }
}

task generateMockWebServerCertificate {
    def mockWebServerPemFile = project.file('src/androidTest/assets/mockWebServer.pem')
    def mockWebServerCertFile = project.file('src/debug/res/raw/localhost_cert')
    outputs.files(mockWebServerPemFile, mockWebServerCertFile)
    outputs.upToDateWhen { isMockWebServerCertValid(mockWebServerPemFile, mockWebServerCertFile) }
    doLast {
        println("Generating MockWebServer certificate ")
        def localhost = InetAddress.getByName("localhost").canonicalHostName
        def certBuilder = new HeldCertificate.Builder()
        def localhostCertificate = certBuilder
                .addSubjectAlternativeName(localhost)
                .duration(7L, TimeUnit.DAYS)
                .build()
        mockWebServerPemFile.write(localhostCertificate.certificatePem())
        mockWebServerPemFile.append(localhostCertificate.privateKeyPkcs8Pem())
        mockWebServerCertFile.write(localhostCertificate.certificatePem())
    }
}

project.afterEvaluate {
    generateDebugResources.dependsOn generateMockWebServerCertificate
    mergeDebugAndroidTestAssets.dependsOn generateMockWebServerCertificate
}
