# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3

parameters:
  run_workflow_feature_build:
    default: true
    type: boolean

  run_workflow_release:
    default: false
    type: boolean

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-test-deploy:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # The next step will run the unit tests
      #- android/run-tests:
      #    test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      #- android/start-emulator-and-run-tests:
      #    test-command: ./gradlew connectedDebugAndroidTest
      #    system-image: system-images;android-25;google_apis;x86
      - run:
          name: Build, Test, and Deploy
          command: |
            ./buildTestDeploy.sh

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  feature_build:
    when: << pipeline.parameters.run_workflow_feature_build >>
    jobs:
      - build-test-deploy:
          filters:
            branches:
              ignore: main
  #release:
  #  when: << pipeline.parameters.run_workflow_release >>
  #  jobs:
  #    - build-release-deploy:
  #        filters:
  #          branches:
  #            only: main
