# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@2.0.0

parameters:
  run_workflow_feature_build:
    default: true
    type: boolean

  run_workflow_release:
    default: false
    type: boolean

  release_version_increment:
    default: patch
    type: string

commands:
  update_bundler:
    steps:
      - run: gem install bundler
      - run: bundle check || bundle install --path vendor/bundle
  create_gradle_cache_key:
    steps:
      - run:
          name: Hash gradle dependency info
          command: |
            md5sum gradle/wrapper/gradle-wrapper.properties appVersion.properties versions.properties gradle.properties **/*.gradle > /tmp/gradle_deps.md5
  restore_gem_cache:
    steps:
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
  restore_gradle_cache:
    steps:
      - restore_cache:
          key: gradle-{{ checksum "/tmp/gradle_deps.md5" }}
  save_gem_cache:
    steps:
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
  save_gradle_cache:
    steps:
      - save_cache:
          key: gradle-{{ checksum "/tmp/gradle_deps.md5" }}
          paths:
            - ~/.gradle
  increase_inotify_limit:
    steps:
      - run: sudo sysctl fs.inotify.max_user_watches=524288
      - run: sudo sysctl -p
  run_tests:
    steps:
      - android/start-emulator-and-run-tests:
          wait-for-emulator: false
          save-gradle-cache: false
          restore-gradle-cache-post-emulator-launch: false
          test-command: ./runTests.sh
          system-image: system-images;android-29;default;x86_64
  archive_artifacts:
    steps:
      - run:
          name: Compress Artifacts
          command: >-
            tar -cvzf artifacts.tar /tmp/android_test ./app/build/outputs ./build/reports
      - store_artifacts:
          path: artifacts.tar
  upload_coverage:
    steps:
      - run:
          name: Download and validate Codecov script
          command: |
            curl -fLso codecov https://codecov.io/bash;
            VERSION=$(grep -o 'VERSION=\"[0-9\.]*\"' codecov | cut -d'"' -f2);
            for i in 1 256 512
            do
            shasum -a $i -c --ignore-missing <(curl -s "https://raw.githubusercontent.com/codecov/codecov-bash/${VERSION}/SHA${i}SUM")
            done
      - run:
          name: Upload Test coverage reports to Codecov
          command: bash ./codecov -f './build/reports/jacoco/aggregateDebugTestCoverage/aggregateDebugTestCoverage.xml'
jobs:
  build-deploy-feature:
    executor:
      name: android/android-machine
      tag: 2021.10.1
    steps:
      - increase_inotify_limit
      - checkout
      - restore_gem_cache
      - create_gradle_cache_key
      - restore_gradle_cache
      - update_bundler
      - save_gem_cache
      - run_tests
      - upload_coverage
      - run:
          name: Build and Deploy Feature
          command: ./buildAndDeployFeature.sh
      - save_gradle_cache
      - archive_artifacts

  release:
    parameters:
      release_version_increment:
        type: string
    executor:
      name: android/android-machine
      tag: 2021.10.1
    steps:
      - increase_inotify_limit
      - checkout
      - restore_gem_cache
      - create_gradle_cache_key
      - restore_gradle_cache
      - run: git config --global user.email "circleci@circleci"
      - run: git config --global user.name "Circle CI"
      - update_bundler
      - save_gem_cache
      - run_tests
      - upload_coverage
      - run:
          name: Release
          command: |
            ./release.sh << parameters.release_version_increment >>
      - archive_artifacts
  deploy_release:
    executor:
      name: android/android-machine
      tag: 2021.10.1
    steps:
      - increase_inotify_limit
      - checkout
      - restore_gem_cache
      - create_gradle_cache_key
      - restore_gradle_cache
      - update_bundler
      - save_gem_cache
      - run:
          name: Deploy Release
          command: |
            ./deployRelease.sh
      - save_gradle_cache
workflows:
  feature_build_and_deploy:
    when: << pipeline.parameters.run_workflow_feature_build >>
    jobs:
      - build-deploy-feature:
          filters:
            branches:
              ignore: main
  release:
    when: << pipeline.parameters.run_workflow_release >>
    jobs:
      - release:
          release_version_increment: << pipeline.parameters.release_version_increment >>
          filters:
            branches:
              only: main
  ci_release:
    jobs:
      - release:
          release_version_increment: ci
          filters:
            branches:
              only: main
  deploy_release:
    jobs:
      - deploy_release:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/